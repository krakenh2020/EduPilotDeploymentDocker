
version: '2'

services:


### University Frontend #######################################################

  university.demo:
    image: docker.pkg.github.com/krakenh2020/edupilotfrontend/kraken-edu_connector:latest
    working_dir: /application
    ports:
      - "${UNIVERSITY_FRONTEND_PORT}:80"


### University Backend/API ####################################################
# production system is at https://api.tugraz.at

  api.university-api.demo:
    image: docker.pkg.github.com/krakenh2020/edupilotbackend/kraken-edu_frontend:latest
    working_dir: /application
    volumes:
      #- ..:/application
      - ./webserver/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "${UNIVERSITY_APIPLATFORM_PORT}:80"
    networks:
      - kraken_edu_agent_net # API calls aries agent
      - kraken_edu_university_net # API calls PHP container and redis container

  php-fpm.university-api.demo:
    image: docker.pkg.github.com/krakenh2020/edupilotbackend/kraken-edu_php:latest
    # port: 9000
    environment:
      - TERM_PROGRAM=Hyper  # force colors for the symfony dumper
    #working_dir: /application
    volumes:
      #- ..:/application 
      - ./php-fpm/php-ini-overrides.ini:/etc/php/7.3/fpm/conf.d/99-overrides.ini
      - ./php-fpm/php-fpm-overrides.conf:/etc/php/7.3/fpm/pool.d/z-overrides.conf
    networks:
      - kraken_edu_agent_net # API calls aries agent
      - kraken_edu_university_net # PHP container called by API

  redis.university-api.demo:
    image: "redis"
    networks:
      - kraken_edu_university_net # redis container called by API

  # redis-commander:
  #   image: "rediscommander/redis-commander"
  #   environment:
  #     - REDIS_HOST=redis.university-api.demo
  #   ports:
  #     - "8101:8081"


### Aries #####################################################################

  # University Agent Aries Agent Interface
  # openapi.university-agent.demo:
  #   container_name: openapi.university-agent.demo
  #   image: swaggerapi/swagger-ui
  #   environment:
  #     - SWAGGER_JSON=/specs/openapi-university.yml
  #     - BASE_URL=/openapi
  #   ports:
  #     - 8089:8080
  #   volumes:
  #     - ./specs:/specs
  #   networks:
  #     - kraken_edu_external_net

  # University Aries Agent
  agent.university-agent.demo:
    container_name:  agent.university-agent.demo
    image: ${AGENT_REST_IMAGE}:${AGENT_REST_IMAGE_TAG}
    environment:
      - ARIESD_API_HOST=${UNIVERSITY_HOST}:${UNIVERSITY_API_PORT}
      - ARIESD_INBOUND_HOST=${HTTP_SCHEME}@${UNIVERSITY_HOST}:${UNIVERSITY_INBOUND_PORT}
      - ARIESD_INBOUND_HOST_EXTERNAL=${HTTP_SCHEME}@http://agent.university-agent.demo:${UNIVERSITY_INBOUND_PORT}
      - ARIESD_WEBHOOK_URL=http://${UNIVERSITY_WEBHOOK_CONTAINER_NAME}:${UNIVERSITY_WEBHOOK_PORT}
      - ARIESD_DEFAULT_LABEL=university-agent
      - ARIESD_DATABASE_TYPE=leveldb
      - ARIESD_DATABASE_PREFIX=data/university
      - ARIESD_DATABASE_TIMEOUT=60
      - ARIESD_HTTP_RESOLVER=${HTTP_DID_RESOLVER}
      - ARIESD_CONTEXT_PROVIDER_URL=${CONTEXT_PROVIDER_URL}
      - ARIESD_MEDIA_TYPE_PROFILES=didcomm/aip2;env=rfc19
      - ARIESD_KEY_TYPE=${DEFAULT_KEY_TYPE}
      - ARIESD_KEY_AGREEMENT_TYPE=${DEFAULT_KEY_AGREEMENT_TYPE}
      #- ARIESD_AUTO_ACCEPT=true
      #- TLS_CERT_FILE=/etc/tls/ec-pubCert.pem
      #- TLS_KEY_FILE=/etc/tls/ec-key.pem
    volumes:
      - ./keys/tls:/etc/tls
    ports:
      - ${UNIVERSITY_INBOUND_PORT}:${UNIVERSITY_INBOUND_PORT}
      - ${UNIVERSITY_API_PORT}:${UNIVERSITY_API_PORT}
    entrypoint: ""
    command:  /bin/sh -c "cp /etc/tls/* /usr/local/share/ca-certificates/;update-ca-certificates; aries-agent-rest start"
    networks:
      - kraken_edu_agent_net # agent calling webhook, agent called by API

  # University Aries Agent Callback Webhook
  webhook.university-agent.demo:
    container_name: ${UNIVERSITY_WEBHOOK_CONTAINER_NAME}
    image: ${SAMPLE_WEBHOOK_IMAGE}:${SAMPLE_WEBHOOK_IMAGE_TAG}
    environment:
      - WEBHOOK_PORT=${UNIVERSITY_WEBHOOK_PORT}
    ports:
      - ${UNIVERSITY_WEBHOOK_PORT}:${UNIVERSITY_WEBHOOK_PORT}
    networks:
      - kraken_edu_agent_net # webbook called by agent



  # Student Aries Agent
  agent.student-agent.demo:
    container_name:  agent.student-agent.demo
    image: ${AGENT_REST_IMAGE}:${AGENT_REST_IMAGE_TAG}
    environment:
      - ARIESD_API_HOST=${STUDENT_HOST}:${STUDENT_API_PORT}
      - ARIESD_INBOUND_HOST=${HTTP_SCHEME}@${STUDENT_HOST}:${STUDENT_INBOUND_PORT}
      - ARIESD_INBOUND_HOST_EXTERNAL=${HTTP_SCHEME}@http://agent.student-agent.demo:${STUDENT_INBOUND_PORT}
      - ARIESD_WEBHOOK_URL=http://${STUDENT_WEBHOOK_CONTAINER_NAME}:${STUDENT_WEBHOOK_PORT} #,http://129.27.227.214:8084/webhook/notify
      - ARIESD_DEFAULT_LABEL=student-agent
      - ARIESD_DATABASE_TYPE=leveldb
      - ARIESD_DATABASE_PREFIX=data/student
      - ARIESD_DATABASE_TIMEOUT=60
      - ARIESD_HTTP_RESOLVER=${HTTP_DID_RESOLVER}
      - ARIESD_CONTEXT_PROVIDER_URL=${CONTEXT_PROVIDER_URL}
      - ARIESD_MEDIA_TYPE_PROFILES=didcomm/aip2;env=rfc19
      - ARIESD_KEY_TYPE=${DEFAULT_KEY_TYPE}
      - ARIESD_KEY_AGREEMENT_TYPE=${DEFAULT_KEY_AGREEMENT_TYPE}
      #- ARIESD_AUTO_ACCEPT=true
      #- TLS_CERT_FILE=/etc/tls/ec-pubCert.pem
      #- TLS_KEY_FILE=/etc/tls/ec-key.pem
    volumes:
      - ./keys/tls:/etc/tls
    ports:
      - ${STUDENT_INBOUND_PORT}:${STUDENT_INBOUND_PORT}
      - ${STUDENT_API_PORT}:${STUDENT_API_PORT}
    entrypoint: ""
    command:  /bin/sh -c "cp /etc/tls/* /usr/local/share/ca-certificates/;update-ca-certificates; aries-agent-rest start"
    networks:
      - kraken_edu_agent_net # agent calling webhook, agent called by API

  # Student Aries Agent Callback Webhook
  webhook.student-agent.demo:
    container_name: ${STUDENT_WEBHOOK_CONTAINER_NAME}
    image: ${SAMPLE_WEBHOOK_IMAGE}:${SAMPLE_WEBHOOK_IMAGE_TAG}
    environment:
      - WEBHOOK_PORT=${STUDENT_WEBHOOK_PORT}
    ports:
      - ${STUDENT_WEBHOOK_PORT}:${STUDENT_WEBHOOK_PORT}
    networks:
      - kraken_edu_agent_net # webbook called by agent


  # TODO: Sidetree Mock



networks:
  #kraken_edu_external_net:

  kraken_edu_agent_net:
    # a bridge network uses a software bridge which allows containers connected to the same bridge network 
    # to communicate, while providing isolation from containers which are not connected to that bridge network
    driver: bridge
    
  kraken_edu_university_net:
    driver: bridge

